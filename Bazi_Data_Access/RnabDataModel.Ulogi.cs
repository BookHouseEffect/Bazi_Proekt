//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 2/5/2017 12:35:36 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Db201617zVaProektRnabContext
{

    /// <summary>
    /// There are no comments for Db201617zVaProektRnabContext.Ulogi in the schema.
    /// </summary>
    [Table(Name = @"public.ulogi")]
    public partial class Ulogi : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UlogaId;

        private string _UlogaIme;
        #pragma warning restore 0649

        private EntitySet<Akaunti> _Akauntis_UlogaId;
    
        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnLoaded method in the schema.
        /// </summary>
        partial void OnLoaded();

        /// <summary>
        /// There are no comments for OnValidate method in the schema.
        /// </summary>
        partial void OnValidate(ChangeAction action);

        /// <summary>
        /// There are no comments for OnCreated method in the schema.
        /// </summary>
        partial void OnCreated();

        /// <summary>
        /// There are no comments for OnUlogaIdChanging method in the schema.
        /// </summary>
        partial void OnUlogaIdChanging(int value);

        /// <summary>
        /// There are no comments for OnUlogaIdChanged method in the schema.
        /// </summary>
        partial void OnUlogaIdChanged();

        /// <summary>
        /// There are no comments for OnUlogaImeChanging method in the schema.
        /// </summary>
        partial void OnUlogaImeChanging(string value);

        /// <summary>
        /// There are no comments for OnUlogaImeChanged method in the schema.
        /// </summary>
        partial void OnUlogaImeChanged();
        #endregion

        /// <summary>
        /// There are no comments for Ulogi constructor in the schema.
        /// </summary>
        public Ulogi()
        {
            this._Akauntis_UlogaId = new EntitySet<Akaunti>(new Action<Akaunti>(this.attach_Akauntis_UlogaId), new Action<Akaunti>(this.detach_Akauntis_UlogaId));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UlogaId in the schema.
        /// </summary>
        [Column(Name = @"uloga_id", Storage = "_UlogaId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required()]
        public int UlogaId
        {
            get
            {
                return this._UlogaId;
            }
            set
            {
                if (this._UlogaId != value)
                {
                    this.OnUlogaIdChanging(value);
                    this.SendPropertyChanging();
                    this._UlogaId = value;
                    this.SendPropertyChanged("UlogaId");
                    this.OnUlogaIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UlogaIme in the schema.
        /// </summary>
        [Column(Name = @"uloga_ime", Storage = "_UlogaIme", CanBeNull = false, DbType = "VARCHAR(64) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        [System.ComponentModel.DataAnnotations.Required()]
        public string UlogaIme
        {
            get
            {
                return this._UlogaIme;
            }
            set
            {
                if (this._UlogaIme != value)
                {
                    this.OnUlogaImeChanging(value);
                    this.SendPropertyChanging();
                    this._UlogaIme = value;
                    this.SendPropertyChanged("UlogaIme");
                    this.OnUlogaImeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Akauntis_UlogaId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Ulogi_Akaunti", Storage="_Akauntis_UlogaId", ThisKey="UlogaId", OtherKey="UlogaId", DeleteRule="NO ACTION")]
        public EntitySet<Akaunti> Akauntis_UlogaId
        {
            get
            {
                return this._Akauntis_UlogaId;
            }
            set
            {
                this._Akauntis_UlogaId.Assign(value);
            }
        }
   
        /// <summary>
        /// There are no comments for PropertyChanging event in the schema.
        /// </summary>
        public event PropertyChangingEventHandler PropertyChanging;

        /// <summary>
        /// There are no comments for PropertyChanged event in the schema.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// There are no comments for SendPropertyChanging method in the schema.
        /// </summary>
        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        /// <summary>
        /// There are no comments for SendPropertyChanging method in the schema.
        /// </summary>
        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        /// <summary>
        /// There are no comments for SendPropertyChanged method in the schema.
        /// </summary>
        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Akauntis_UlogaId(Akaunti entity)
        {
            this.SendPropertyChanging("Akauntis_UlogaId");
            entity.Ulogi_UlogaId = this;
        }
    
        private void detach_Akauntis_UlogaId(Akaunti entity)
        {
            this.SendPropertyChanging("Akauntis_UlogaId");
            entity.Ulogi_UlogaId = null;
        }
    }

}
