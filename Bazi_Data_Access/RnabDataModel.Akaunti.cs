//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 2/5/2017 12:35:36 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Db201617zVaProektRnabContext
{

    /// <summary>
    /// There are no comments for Db201617zVaProektRnabContext.Akaunti in the schema.
    /// </summary>
    [Table(Name = @"public.akaunti")]
    public partial class Akaunti : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _AkauntId;

        private string _EmailAdresa;

        private string _KorisnichkoIme;

        private string _LozinkaHash;

        private string _BezbednostnaMarka;

        private int _UlogaId;
        #pragma warning restore 0649

        private EntitySet<Aviokompanii> _Aviokompaniis_AkauntId;

        private EntitySet<Patnici> _Patnicis_AkauntId;

        private EntitySet<Vraboteni> _Vrabotenis_AkauntId;

        private EntityRef<Ulogi> _Ulogi_UlogaId;
    
        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnLoaded method in the schema.
        /// </summary>
        partial void OnLoaded();

        /// <summary>
        /// There are no comments for OnValidate method in the schema.
        /// </summary>
        partial void OnValidate(ChangeAction action);

        /// <summary>
        /// There are no comments for OnCreated method in the schema.
        /// </summary>
        partial void OnCreated();

        /// <summary>
        /// There are no comments for OnAkauntIdChanging method in the schema.
        /// </summary>
        partial void OnAkauntIdChanging(int value);

        /// <summary>
        /// There are no comments for OnAkauntIdChanged method in the schema.
        /// </summary>
        partial void OnAkauntIdChanged();

        /// <summary>
        /// There are no comments for OnEmailAdresaChanging method in the schema.
        /// </summary>
        partial void OnEmailAdresaChanging(string value);

        /// <summary>
        /// There are no comments for OnEmailAdresaChanged method in the schema.
        /// </summary>
        partial void OnEmailAdresaChanged();

        /// <summary>
        /// There are no comments for OnKorisnichkoImeChanging method in the schema.
        /// </summary>
        partial void OnKorisnichkoImeChanging(string value);

        /// <summary>
        /// There are no comments for OnKorisnichkoImeChanged method in the schema.
        /// </summary>
        partial void OnKorisnichkoImeChanged();

        /// <summary>
        /// There are no comments for OnLozinkaHashChanging method in the schema.
        /// </summary>
        partial void OnLozinkaHashChanging(string value);

        /// <summary>
        /// There are no comments for OnLozinkaHashChanged method in the schema.
        /// </summary>
        partial void OnLozinkaHashChanged();

        /// <summary>
        /// There are no comments for OnBezbednostnaMarkaChanging method in the schema.
        /// </summary>
        partial void OnBezbednostnaMarkaChanging(string value);

        /// <summary>
        /// There are no comments for OnBezbednostnaMarkaChanged method in the schema.
        /// </summary>
        partial void OnBezbednostnaMarkaChanged();

        /// <summary>
        /// There are no comments for OnUlogaIdChanging method in the schema.
        /// </summary>
        partial void OnUlogaIdChanging(int value);

        /// <summary>
        /// There are no comments for OnUlogaIdChanged method in the schema.
        /// </summary>
        partial void OnUlogaIdChanged();
        #endregion

        /// <summary>
        /// There are no comments for Akaunti constructor in the schema.
        /// </summary>
        public Akaunti()
        {
            this._Aviokompaniis_AkauntId = new EntitySet<Aviokompanii>(new Action<Aviokompanii>(this.attach_Aviokompaniis_AkauntId), new Action<Aviokompanii>(this.detach_Aviokompaniis_AkauntId));
            this._Patnicis_AkauntId = new EntitySet<Patnici>(new Action<Patnici>(this.attach_Patnicis_AkauntId), new Action<Patnici>(this.detach_Patnicis_AkauntId));
            this._Vrabotenis_AkauntId = new EntitySet<Vraboteni>(new Action<Vraboteni>(this.attach_Vrabotenis_AkauntId), new Action<Vraboteni>(this.detach_Vrabotenis_AkauntId));
            this._Ulogi_UlogaId  = default(EntityRef<Ulogi>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for AkauntId in the schema.
        /// </summary>
        [Column(Name = @"akaunt_id", Storage = "_AkauntId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required()]
        public int AkauntId
        {
            get
            {
                return this._AkauntId;
            }
            set
            {
                if (this._AkauntId != value)
                {
                    this.OnAkauntIdChanging(value);
                    this.SendPropertyChanging();
                    this._AkauntId = value;
                    this.SendPropertyChanged("AkauntId");
                    this.OnAkauntIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmailAdresa in the schema.
        /// </summary>
        [Column(Name = @"email_adresa", Storage = "_EmailAdresa", CanBeNull = false, DbType = "VARCHAR(254) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        [System.ComponentModel.DataAnnotations.StringLength(254)]
        [System.ComponentModel.DataAnnotations.Required()]
        public string EmailAdresa
        {
            get
            {
                return this._EmailAdresa;
            }
            set
            {
                if (this._EmailAdresa != value)
                {
                    this.OnEmailAdresaChanging(value);
                    this.SendPropertyChanging();
                    this._EmailAdresa = value;
                    this.SendPropertyChanged("EmailAdresa");
                    this.OnEmailAdresaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for KorisnichkoIme in the schema.
        /// </summary>
        [Column(Name = @"korisnichko_ime", Storage = "_KorisnichkoIme", CanBeNull = false, DbType = "VARCHAR(30) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        [System.ComponentModel.DataAnnotations.Required()]
        public string KorisnichkoIme
        {
            get
            {
                return this._KorisnichkoIme;
            }
            set
            {
                if (this._KorisnichkoIme != value)
                {
                    this.OnKorisnichkoImeChanging(value);
                    this.SendPropertyChanging();
                    this._KorisnichkoIme = value;
                    this.SendPropertyChanged("KorisnichkoIme");
                    this.OnKorisnichkoImeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LozinkaHash in the schema.
        /// </summary>
        [Column(Name = @"lozinka_hash", Storage = "_LozinkaHash", CanBeNull = false, DbType = "CHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        [System.ComponentModel.DataAnnotations.Required()]
        public string LozinkaHash
        {
            get
            {
                return this._LozinkaHash;
            }
            set
            {
                if (this._LozinkaHash != value)
                {
                    this.OnLozinkaHashChanging(value);
                    this.SendPropertyChanging();
                    this._LozinkaHash = value;
                    this.SendPropertyChanged("LozinkaHash");
                    this.OnLozinkaHashChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BezbednostnaMarka in the schema.
        /// </summary>
        [Column(Name = @"bezbednostna_marka", Storage = "_BezbednostnaMarka", CanBeNull = false, DbType = "CHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        [System.ComponentModel.DataAnnotations.Required()]
        public string BezbednostnaMarka
        {
            get
            {
                return this._BezbednostnaMarka;
            }
            set
            {
                if (this._BezbednostnaMarka != value)
                {
                    this.OnBezbednostnaMarkaChanging(value);
                    this.SendPropertyChanging();
                    this._BezbednostnaMarka = value;
                    this.SendPropertyChanged("BezbednostnaMarka");
                    this.OnBezbednostnaMarkaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UlogaId in the schema.
        /// </summary>
        [Column(Name = @"uloga_id", Storage = "_UlogaId", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        [System.ComponentModel.DataAnnotations.Required()]
        public int UlogaId
        {
            get
            {
                return this._UlogaId;
            }
            set
            {
                if (this._UlogaId != value)
                {
                    if (this._Ulogi_UlogaId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUlogaIdChanging(value);
                    this.SendPropertyChanging();
                    this._UlogaId = value;
                    this.SendPropertyChanged("UlogaId");
                    this.OnUlogaIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Aviokompaniis_AkauntId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Akaunti_Aviokompanii", Storage="_Aviokompaniis_AkauntId", ThisKey="AkauntId", OtherKey="AkauntId", DeleteRule="NO ACTION")]
        public EntitySet<Aviokompanii> Aviokompaniis_AkauntId
        {
            get
            {
                return this._Aviokompaniis_AkauntId;
            }
            set
            {
                this._Aviokompaniis_AkauntId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Patnicis_AkauntId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Akaunti_Patnici", Storage="_Patnicis_AkauntId", ThisKey="AkauntId", OtherKey="AkauntId", DeleteRule="NO ACTION")]
        public EntitySet<Patnici> Patnicis_AkauntId
        {
            get
            {
                return this._Patnicis_AkauntId;
            }
            set
            {
                this._Patnicis_AkauntId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Vrabotenis_AkauntId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Akaunti_Vraboteni", Storage="_Vrabotenis_AkauntId", ThisKey="AkauntId", OtherKey="AkauntId", DeleteRule="NO ACTION")]
        public EntitySet<Vraboteni> Vrabotenis_AkauntId
        {
            get
            {
                return this._Vrabotenis_AkauntId;
            }
            set
            {
                this._Vrabotenis_AkauntId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Ulogi_UlogaId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Ulogi_Akaunti", Storage="_Ulogi_UlogaId", ThisKey="UlogaId", OtherKey="UlogaId", IsForeignKey=true, DeleteOnNull=true)]
        public Ulogi Ulogi_UlogaId
        {
            get
            {
                return this._Ulogi_UlogaId.Entity;
            }
            set
            {
                Ulogi previousValue = this._Ulogi_UlogaId.Entity;
                if ((previousValue != value) || (this._Ulogi_UlogaId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Ulogi_UlogaId.Entity = null;
                        previousValue.Akauntis_UlogaId.Remove(this);
                    }
                    this._Ulogi_UlogaId.Entity = value;
                    if (value != null)
                    {
                        this._UlogaId = value.UlogaId;
                        value.Akauntis_UlogaId.Add(this);
                    }
                    else
                    {
                        this._UlogaId = default(int);
                    }
                    this.SendPropertyChanged("Ulogi_UlogaId");
                }
            }
        }
   
        /// <summary>
        /// There are no comments for PropertyChanging event in the schema.
        /// </summary>
        public event PropertyChangingEventHandler PropertyChanging;

        /// <summary>
        /// There are no comments for PropertyChanged event in the schema.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// There are no comments for SendPropertyChanging method in the schema.
        /// </summary>
        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        /// <summary>
        /// There are no comments for SendPropertyChanging method in the schema.
        /// </summary>
        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        /// <summary>
        /// There are no comments for SendPropertyChanged method in the schema.
        /// </summary>
        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Aviokompaniis_AkauntId(Aviokompanii entity)
        {
            this.SendPropertyChanging("Aviokompaniis_AkauntId");
            entity.Akaunti_AkauntId = this;
        }
    
        private void detach_Aviokompaniis_AkauntId(Aviokompanii entity)
        {
            this.SendPropertyChanging("Aviokompaniis_AkauntId");
            entity.Akaunti_AkauntId = null;
        }

        private void attach_Patnicis_AkauntId(Patnici entity)
        {
            this.SendPropertyChanging("Patnicis_AkauntId");
            entity.Akaunti_AkauntId = this;
        }
    
        private void detach_Patnicis_AkauntId(Patnici entity)
        {
            this.SendPropertyChanging("Patnicis_AkauntId");
            entity.Akaunti_AkauntId = null;
        }

        private void attach_Vrabotenis_AkauntId(Vraboteni entity)
        {
            this.SendPropertyChanging("Vrabotenis_AkauntId");
            entity.Akaunti_AkauntId = this;
        }
    
        private void detach_Vrabotenis_AkauntId(Vraboteni entity)
        {
            this.SendPropertyChanging("Vrabotenis_AkauntId");
            entity.Akaunti_AkauntId = null;
        }
    }

}
