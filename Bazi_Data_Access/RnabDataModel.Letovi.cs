//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 2/6/2017 2:43:40 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Db201617zVaProektRnabContext
{

    /// <summary>
    /// There are no comments for Db201617zVaProektRnabContext.Letovi in the schema.
    /// </summary>
    [Table(Name = @"public.letovi")]
    public partial class Letovi : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _LetId;

        private string _Status;

        private System.Nullable<int> _KompanijaId;
        #pragma warning restore 0649

        private EntitySet<Megjuletovi> _Megjuletovis_LetId;

        private EntitySet<DenoviNaLetanje> _DenoviNaLetanjes_LetId;

        private EntityRef<Aviokompanii> _Aviokompanii_KompanijaId;
    
        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnLoaded method in the schema.
        /// </summary>
        partial void OnLoaded();

        /// <summary>
        /// There are no comments for OnValidate method in the schema.
        /// </summary>
        partial void OnValidate(ChangeAction action);

        /// <summary>
        /// There are no comments for OnCreated method in the schema.
        /// </summary>
        partial void OnCreated();

        /// <summary>
        /// There are no comments for OnLetIdChanging method in the schema.
        /// </summary>
        partial void OnLetIdChanging(int value);

        /// <summary>
        /// There are no comments for OnLetIdChanged method in the schema.
        /// </summary>
        partial void OnLetIdChanged();

        /// <summary>
        /// There are no comments for OnStatusChanging method in the schema.
        /// </summary>
        partial void OnStatusChanging(string value);

        /// <summary>
        /// There are no comments for OnStatusChanged method in the schema.
        /// </summary>
        partial void OnStatusChanged();

        /// <summary>
        /// There are no comments for OnKompanijaIdChanging method in the schema.
        /// </summary>
        partial void OnKompanijaIdChanging(System.Nullable<int> value);

        /// <summary>
        /// There are no comments for OnKompanijaIdChanged method in the schema.
        /// </summary>
        partial void OnKompanijaIdChanged();
        #endregion

        /// <summary>
        /// There are no comments for Letovi constructor in the schema.
        /// </summary>
        public Letovi()
        {
            this._Megjuletovis_LetId = new EntitySet<Megjuletovi>(new Action<Megjuletovi>(this.attach_Megjuletovis_LetId), new Action<Megjuletovi>(this.detach_Megjuletovis_LetId));
            this._DenoviNaLetanjes_LetId = new EntitySet<DenoviNaLetanje>(new Action<DenoviNaLetanje>(this.attach_DenoviNaLetanjes_LetId), new Action<DenoviNaLetanje>(this.detach_DenoviNaLetanjes_LetId));
            this._Aviokompanii_KompanijaId  = default(EntityRef<Aviokompanii>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for LetId in the schema.
        /// </summary>
        [Column(Name = @"let_id", Storage = "_LetId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required()]
        public int LetId
        {
            get
            {
                return this._LetId;
            }
            set
            {
                if (this._LetId != value)
                {
                    this.OnLetIdChanging(value);
                    this.SendPropertyChanging();
                    this._LetId = value;
                    this.SendPropertyChanged("LetId");
                    this.OnLetIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        [System.ComponentModel.DataAnnotations.Required()]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for KompanijaId in the schema.
        /// </summary>
        [Column(Name = @"kompanija_id", Storage = "_KompanijaId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> KompanijaId
        {
            get
            {
                return this._KompanijaId;
            }
            set
            {
                if (this._KompanijaId != value)
                {
                    if (this._Aviokompanii_KompanijaId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnKompanijaIdChanging(value);
                    this.SendPropertyChanging();
                    this._KompanijaId = value;
                    this.SendPropertyChanged("KompanijaId");
                    this.OnKompanijaIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Megjuletovis_LetId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Letovi_Megjuletovi", Storage="_Megjuletovis_LetId", ThisKey="LetId", OtherKey="LetId", DeleteRule="NO ACTION")]
        public EntitySet<Megjuletovi> Megjuletovis_LetId
        {
            get
            {
                return this._Megjuletovis_LetId;
            }
            set
            {
                this._Megjuletovis_LetId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for DenoviNaLetanjes_LetId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Letovi_DenoviNaLetanje", Storage="_DenoviNaLetanjes_LetId", ThisKey="LetId", OtherKey="LetId", DeleteRule="NO ACTION")]
        public EntitySet<DenoviNaLetanje> DenoviNaLetanjes_LetId
        {
            get
            {
                return this._DenoviNaLetanjes_LetId;
            }
            set
            {
                this._DenoviNaLetanjes_LetId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Aviokompanii_KompanijaId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Aviokompanii_Letovi", Storage="_Aviokompanii_KompanijaId", ThisKey="KompanijaId", OtherKey="KompanijaId", IsForeignKey=true)]
        public Aviokompanii Aviokompanii_KompanijaId
        {
            get
            {
                return this._Aviokompanii_KompanijaId.Entity;
            }
            set
            {
                Aviokompanii previousValue = this._Aviokompanii_KompanijaId.Entity;
                if ((previousValue != value) || (this._Aviokompanii_KompanijaId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Aviokompanii_KompanijaId.Entity = null;
                        previousValue.Letovis_KompanijaId.Remove(this);
                    }
                    this._Aviokompanii_KompanijaId.Entity = value;
                    if (value != null)
                    {
                        this._KompanijaId = value.KompanijaId;
                        value.Letovis_KompanijaId.Add(this);
                    }
                    else
                    {
                        this._KompanijaId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Aviokompanii_KompanijaId");
                }
            }
        }
   
        /// <summary>
        /// There are no comments for PropertyChanging event in the schema.
        /// </summary>
        public event PropertyChangingEventHandler PropertyChanging;

        /// <summary>
        /// There are no comments for PropertyChanged event in the schema.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// There are no comments for SendPropertyChanging method in the schema.
        /// </summary>
        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        /// <summary>
        /// There are no comments for SendPropertyChanging method in the schema.
        /// </summary>
        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        /// <summary>
        /// There are no comments for SendPropertyChanged method in the schema.
        /// </summary>
        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Megjuletovis_LetId(Megjuletovi entity)
        {
            this.SendPropertyChanging("Megjuletovis_LetId");
            entity.Letovi_LetId = this;
        }
    
        private void detach_Megjuletovis_LetId(Megjuletovi entity)
        {
            this.SendPropertyChanging("Megjuletovis_LetId");
            entity.Letovi_LetId = null;
        }

        private void attach_DenoviNaLetanjes_LetId(DenoviNaLetanje entity)
        {
            this.SendPropertyChanging("DenoviNaLetanjes_LetId");
            entity.Letovi_LetId = this;
        }
    
        private void detach_DenoviNaLetanjes_LetId(DenoviNaLetanje entity)
        {
            this.SendPropertyChanging("DenoviNaLetanjes_LetId");
            entity.Letovi_LetId = null;
        }
    }

}
